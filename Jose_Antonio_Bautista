# Bio
Por mi parte, empecé a programar con 14 años, de casualidad. Vi una película llamada "Juegos de guerra" y me impresionó esa cosa extraña capaz de pensar por sí misma, escribir en una pantalla y comunicarse por teléfono.
Aviso para navegantes: la película ha envejecido realmente mal, no la recomiendo para motivar a sus hijos.
Eran otros tiempos, en España no había prácticamente ordenadores y nadie sabía muy bien de qué iba esto así que me compré un libro de programación Basic https://usborne.com/browse-books/features/computer-and-coding-books/ y comencé mi camino en el desarrollo de software.

Después de eso vino el Spectrum, un montón de libros sobre Z-80, mi paso por la Universidad y treinta años de aprendizaje que aún continúan.

Para saber más cosas sobre mí consulte mi web [Ant2e6] (http://ant2e6.webs-interesantes.es) o mi Twitter [@jbautistam] (https://twitter.com/jbautistam).

# Introducción

He leído incontables artículos sobre lo que debería saber un programador y cuales a son sus características pero creó que la frase que lo resume todo es de Joel Spolsky: "El mejor programador es aquel que jamás dice: hay que empezarlo todo de cero". 

Los desarrolladores tenemos tendencia a considerarnos los mejores en nuestro campo y a desechar con facilidad el trabajo de nuestros predecesores. Si eres capaz de leer código y modificarlo sin decir demasiados tacos, eres un buen programador.
Sin bromas, Para mí lo que define un buen programador es la curiosidad. La necesidad de aprender cómo se hacen las cosas. El impulso de sentarse ante el teclado y buscar una solución a un problema. La falta de miedo o la inconsciencia. El intentar superar los límites.

Para mí la programación es pasión pero no nos equivoquemos. La programación es un trabajo, la pasión es opcional, simplemente se necesita querer hacer las cosas bien y que los usuarios de nuestras aplicaciones disfruten con ellas. Los programadores de PHP o Bootstrap son ejemplos claros, simplemente decidieron desarrollar algo que creían necesario y lo hicieron bien.

El día que juegues  a un videojuego y comiences a pensar en algorítmicos de pintor sabrás a lo que me refiero y si sientes o no pasión por el desarrollo, mientras tanto, con curiosidad me vale.

# Perfil
Prácticamente toda mi vida laboral la he dedicado al desarrollo. Normalmente en consultoría realizando aplicaciones para clientes. Prácticamente he hecho un poco de todo desde aplicaciones de facturación a aplicaciones de centralita, análisis clínicos, calibración de trenes o una herramienta para los técnicos de los  Juegos Olímpicos de Pekín.

Y es por eso que aunque en mi nómina pone analista funcional y jefe de proyecto, mi día a día sigue siendo el desarrollo. Digo de cuando en cuando que soy ingeniero de software aunque mi perfil real es el de programador enteradillo, es decir, sé un poco de todo y dedico la gran parte del tiempo en mi trabajo a los temas complejos y de arquitectura, aunque de vez en cuando eso implique ponerle colorines a una pantalla.

Prácticamente toda mi carrera ha estado relacionada con tecnologías Microsoft y aunque he trabajado en varios lenguajes como Java, últimamente me he centrado en C# profesionalmente y algo de Python a nivel personal.

# Camino de aprendizaje

Aunque ya sabía algo de programación cuando entré en la Universidad, fue allí donde realmente aprendí a programar de verdad. Sé que a muchos la Universidad les parece una pérdida de tiempo, un lugar donde te enseñarán cosas que luego no vas a utilizar nunca, pero da una base sólida de conocimientos y te obliga a centrarte en temas que posiblemente nunca aprenderías por tu cuenta.

Los conocimientos de estructuras de datos y algoritmos son básicos, las matemáticas son importantes si algún día te enfrentas a problemas relacionados con minería de datos, criptografía o programación gráfica... No creo que nunca me hubiese atrevido a escribir un compilador sin mi base universitaria.

Pero la Universidad no es el único camino, para mí de hecho es una consecuencia de mi formación que empezó mucho antes y creo que se debe llegar a ella con conocimientos más o menos sólidos sobre programación.

Mis consejos para aprender a programar (antes y después de pasar por un módulo superior) son los siguientes:

* Empieza por lo básico: es decir, la programación estructurada y posteriormente la programación orientada a objetos y la programación funcional. Programar es una forma de pensar y comunicarse, si no tienes la base de programación "lineal" o estructurada te va a resultar complicado pasar a la orientación a objetos.

* Elige para empezar un lenguaje que no tenga demasiada parafernalia y te permita ver resultados instantáneamente como Python. Lenguajes como C# o Java tienen unos requisitos que obligan a manejar objetos sistemas que posiblemente al principio resulten excesivos. Yo huiría del JavaScript porque está demasiado enlazado al navegador y utiliza paradigmas "extraños" como la programación orientada a prototipos que no se encuentran en otros lenguajes de programación. Por curiosidad, échale un vistazo a Scratch, puede que te parezca demasiado "para niños" pero la unión de lenguaje visual con resultados rápidos te hará el aprendizaje mucho más divertido.

* Comienza por lo básico: escribir "hola mundo" en pantalla puede parecer tonto pero es lo que todos hacemos, pasa a los ficheros y luego a los formularios y a las aplicaciones más complejas.

* Intenta no ir demasiado rápido: la programación "real" actual tiene una curva de aprendizaje muy alta e incluso a personas que llevamos mucho tiempo en esto nos cuesta trabajo, así que aunque escuches hablar de frameworks como Angular, Json, XML, Elixir, Erlang, RabitMQ, Laravel, NoSql o cosas similares, céntrate en aprender las bases. Tendrás tiempo para avanzar.

* Concédete una segunda oportunidad: la programación es complicada y creo que todos en algún momento hemos pensado en tirar la toalla. Cuando te ocurra, simplemente vuelve a lo básico.

* Aparte de la programación no olvides temas como las bases de los sistemas de comunicaciones (TCP/UDP) o seguridad.
Cuando puedas da un paso adelante hacia las bases de datos y el SQL. No olvides los temas de normalización y diseño.

* Y tampoco olvides la ofimática. Aplicaciones como procesadores de texto, hojas de cálculo o herramientas de presentación son básicas en el mundo de hoy y también los desarrolladores las utilizamos (algunas veces, para nuestra desgracia). Tampoco olvides conocer tus herramientas de desarrollo: compiladores, linkadores, profilers, control de versiones ...

* Si ya sabes lo básico sobre la programación, comienza con la programación orientada a objetos y los paradigmas de código limpio como SOLID antes de empezar con los patrones de diseño y los antipatrones.

* Intenta tener siempre algún proyecto que te interese y puedas desarrollar solo. No seas demasiado ambicioso y pretendas fundar el nuevo Facebook, sé consciente que estás aprendiendo.

* Evalúa tu evolución y tus debilidades: pon en valor lo que no sabes y practica sobre ello. 

* Pregunta, asiste a conferencias sin abrumarte, ve vídeos, lee mucho código... Internet está llena de gente que comparte sus conocimientos. Eso sí, sé respetuoso no pretendas que hagamos tus deberes. Cada vez que preguntes a alguien considera que te ayuda en su tiempo libre y que compites con su familia, amigos y sus propios proyectos. Un gracias y un por favor nunca vienen mal y si alguien te dice "no lo sé" no te lo tomes a mal, posiblemente no lo sepa.

* Un consejo: la programación es apasionante pero hay vida al otro lado del teclado. Aprende a desconectar, a tratar con el estrés, practica deporte, aprende a trabajar en equipo y comunicarte... 

No desesperes y estudia un poco cada día, como decía al principio yo llevo treinta años estudiando y creo que algo sé de esto pero aún me sorprende lo poco que conozco de algunos temas.
